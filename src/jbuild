(jbuild_version 1)

(library (
  (name lacaml)
  (public_name lacaml)
  (modules (
    Lacaml
    Common Io
    S D C Z
    Utils Version
    Float32 Float64
    Complex32 Complex64
    Real_io Complex_io
    Impl4_S Impl4_D Impl4_C Impl4_Z
    Impl2_S Impl2_D Impl2_C Impl2_Z
    Vec4_S Vec4_D Vec4_C Vec4_Z
    Vec2_S Vec2_D Vec2_C Vec2_Z
    Mat4_S Mat4_D Mat4_C Mat4_Z
    Mat2_S Mat2_D Mat2_C Mat2_Z
  ))
  (flags (
    :standard
    -w -9
    -safe-string -strict-sequence
    -principal -short-paths
  ))
  (c_names (
    impl_c utils_c
    vec2_S_c vec2_D_c vec2_C_c vec2_Z_c
    vec4_S_c vec4_D_c vec4_C_c vec4_Z_c
    mat2_S_c mat2_D_c mat2_C_c mat2_Z_c
    mat4_S_c mat4_D_c mat4_C_c mat4_Z_c
    impl2_S_c impl2_D_c impl2_C_c impl2_Z_c
    impl4_S_c impl4_D_c impl4_C_c impl4_Z_c
  ))
  (c_flags (
    (:include c_flags.sexp)
    -g
    ; -ffast-math can break IEEE754 floating point semantics, but it is likely
    ; safe with the current Lacaml code base
    -O3 -march=native -ffast-math
    -fPIC -DPIC
    ; NOTE: for debugging before releases
    ; -Wall -pedantic -Wextra -Wunused
  ))
  (c_library_flags (:include c_library_flags.sexp))
  (libraries (bigarray))
))

(rule (
  (targets (c_flags.sexp c_library_flags.sexp))
  (deps (config/discover.exe))
  (action (run ${<} -ocamlc ${OCAMLC}))
))

(rule (
  (targets (
    lacaml.mli
    ;
    S.mli S.ml
    D.mli D.ml
    C.mli C.ml
    Z.mli Z.ml
    ;
    impl4_S.mli impl4_S.ml
    impl4_D.mli impl4_D.ml
    impl4_C.mli impl4_C.ml
    impl4_Z.mli impl4_Z.ml
    impl2_S.mli impl2_S.ml
    impl2_D.mli impl2_D.ml
    impl2_C.mli impl2_C.ml
    impl2_Z.mli impl2_Z.ml
    ;
    mat4_S.mli mat4_S.ml
    mat4_D.mli mat4_D.ml
    mat4_C.mli mat4_C.ml
    mat4_Z.mli Mat4_Z.ml
    Mat2_S.mli Mat2_S.ml
    Mat2_D.mli Mat2_D.ml
    Mat2_C.mli Mat2_C.ml
    Mat2_Z.mli Mat2_Z.ml
    ;
    Vec4_S.mli Vec4_S.ml
    Vec4_D.mli Vec4_D.ml
    Vec4_C.mli Vec4_C.ml
    Vec4_Z.mli Vec4_Z.ml
    Vec2_S.mli Vec2_S.ml
    Vec2_D.mli Vec2_D.ml
    Vec2_C.mli Vec2_C.ml
    Vec2_Z.mli Vec2_Z.ml
  ))
  (deps (
    config/make_prec_dep.exe
    lacaml.pre.mli
    SD.mli SD.ml CZ.mli CZ.ml
    impl_SDCZ.mli impl_SDCZ.ml impl_SD.mli impl_SD.ml impl_CZ.mli impl_CZ.ml
    mat_SDCZ.mli mat_SDCZ.ml mat_SD.mli mat_SD.ml mat_CZ.mli mat_CZ.ml
    vec_SDCZ.mli vec_SDCZ.ml vec_SD.mli vec_SD.ml vec_CZ.mli vec_CZ.ml
  ))
  (action (run config/make_prec_dep.exe))
))
